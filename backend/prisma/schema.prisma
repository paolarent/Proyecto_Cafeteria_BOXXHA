generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bebcaliente {
  id_bebcaliente Int              @id
  nombre         String           @db.VarChar(15)
  sabor          String           @db.VarChar(25)
  precio_base    Float
  detallepedido  detalle_pedido[]
}

model bebfria {
  id_bebfria    Int              @id
  nombre        String           @db.VarChar(15)
  sabor         String           @db.VarChar(25)
  precio_base   Float
  detallepedido detalle_pedido[]
}

model detalle_pedido {
  id_detalle     Int             @id @default(autoincrement())
  id_pedido      Int
  id_frappe      Int?
  id_leche       Int?
  id_postre      Int?
  id_tamano      Int
  regular        Boolean?
  total          Float?
  id_bebcaliente Int?
  id_bebfria     Int?
  detalleextra   detalle_extra[]
  bebcaliente    bebcaliente?    @relation(fields: [id_bebcaliente], references: [id_bebcaliente], map: "fk_bebidac_detalleped")
  bebfria        bebfria?        @relation(fields: [id_bebfria], references: [id_bebfria], map: "fk_bebidaf_detalleped")
  frappe         frappe?         @relation(fields: [id_frappe], references: [id_frappe], map: "fk_frappe_detalleped")
  leche          leche?          @relation(fields: [id_leche], references: [id_leche], map: "fk_leche_detalleped")
  pedido         pedido          @relation(fields: [id_pedido], references: [id_pedido], onDelete: NoAction, onUpdate: NoAction, map: "fk_pedido_detalleped")
  postre         postre?         @relation(fields: [id_postre], references: [id_postre], map: "fk_postre_detalleped")
  tamano         tamano          @relation(fields: [id_tamano], references: [id_tamano], map: "fk_tamano_detalleped")

  @@index([id_pedido], map: "fk_pedido_detalleped_idx")
  @@index([id_bebcaliente], map: "fk_bebidac_detalleped_idx")
  @@index([id_bebfria], map: "fk_bebidaf_detalleped_idx")
  @@index([id_frappe], map: "fk_frappe_detalleped_idx")
  @@index([id_postre], map: "fk_postre_detalleped_idx")
  @@index([id_tamano], map: "fk_tamano_detalleped_idx")
  @@index([id_leche], map: "fk_leche_detalleped_idx")
}

model extra {
  id_extra     Int             @id
  nombre       String          @db.VarChar(25)
  precio_extra Float           @db.Float
  detalleextra detalle_extra[]
}

model detalle_extra {
  id_detalle_extra Int            @id @default(autoincrement())
  id_detalle       Int
  id_extra         Int?
  cantidad         Int?
  precio_total     Float?         @db.Float
  detalle_pedido   detalle_pedido @relation(fields: [id_detalle], references: [id_detalle])
  extra            extra?         @relation(fields: [id_extra], references: [id_extra])

  @@index([id_detalle], map: "fk_detalle_detalle_extra_idx")
  @@index([id_extra], map: "fk_extra_detalle_extra_idx")
}

model frappe {
  id_frappe     Int              @id
  nombre        String           @db.VarChar(15)
  sabor         String           @db.VarChar(25)
  precio_base   Float
  detallepedido detalle_pedido[]
}

model leche {
  id_leche      Int              @id
  nombre        String           @db.VarChar(25)
  precio_leche  Float
  detallepedido detalle_pedido[]
}

model notificacion {
  id_notificacion Int    @id @default(autoincrement())
  id_pedido       Int
  mensaje         String @db.VarChar(1000)
  pedido          pedido @relation(fields: [id_pedido], references: [id_pedido], onDelete: NoAction, onUpdate: NoAction, map: "fk_pedido_notif")

  @@index([id_pedido], map: "fk_pedido_notif_idx")
}

model pago {
  id_pago      Int              @id @default(autoincrement())
  id_pedido    Int
  metodo_pago  pago_metodo_pago
  monto_pagado Float            @db.Float
  fecha_pago   DateTime         @default(now()) @db.Timestamp(0)
  status       pago_status
  pedido       pedido           @relation(fields: [id_pedido], references: [id_pedido], onDelete: NoAction, onUpdate: NoAction, map: "fk_pedido_pago")

  @@index([id_pedido], map: "fk_pedido_pago_idx")
}

model pedido {
  id_pedido      Int              @id @default(autoincrement())
  id_usuario     Int
  fecha          DateTime         @default(now()) @db.Timestamp(0)
  status         pedido_status
  codigo_conf    String           @db.VarChar(6)
  total          Float?           @db.Float
  detalle_pedido detalle_pedido[]
  notificacion   notificacion[]
  pago           pago[]
  usuario        usuario          @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario_pedido")

  @@index([id_usuario], map: "id_usuario_idx")
}

model postre {
  id_postre     Int              @id
  nombre        String           @db.VarChar(15)
  sabor         String           @db.VarChar(25)
  precio_base   Float
  detallepedido detalle_pedido[]
}

model tamano {
  id_tamano     Int              @id
  nombre        String           @db.VarChar(4)
  precio_tamano Float
  detallepedido detalle_pedido[]
}

model usuario {
  id_usuario     Int                  @id @default(autoincrement())
  nombre         String               @db.VarChar(15)
  apellido       String               @db.VarChar(25)
  email          String?              @unique @db.VarChar(45)
  numero_tel     String?              @db.VarChar(10)
  usuario        String               @unique @db.VarChar(15)
  contra         String               @db.VarChar(70)
  tipo_usuario   usuario_tipo_usuario @default(cliente)
  fecha_registro DateTime             @default(now()) @db.Timestamp(0)
  status         usuario_status       @default(A)
  pedido         pedido[]

  @@index([email], map: "email_idx")
}

enum pago_metodo_pago {
  tarjeta
  efectivo
}

enum pedido_status {
  pendiente
  procesando
  listo
  entregado
}

enum pago_status {
  pendiente
  exitoso
  fallido
}

enum usuario_tipo_usuario {
  cliente
  empleado
  admin
}

enum usuario_status {
  A
  B
}
